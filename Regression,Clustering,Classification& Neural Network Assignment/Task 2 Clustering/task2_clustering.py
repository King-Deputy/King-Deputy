# -*- coding: utf-8 -*-
"""Task2 Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Icl6oVnLikJNAGEH0AYHRlbH1XqK5sYS

# Task 2

## Clustering

### Importing Necessary Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from scipy import stats
from sklearn.preprocessing import StandardScaler
import seaborn as sns

"""### Loading and Exploring the data"""

data_path = "/content/drive/MyDrive/Regression,clustering,ANNproject/country_data.csv"

df = pd.read_csv(data_path)

# Displaying the first few rows of the dataset
print(df.head())

# Getting basic statistics about the dataset
print(df.describe())

# Checking for missing values
print(df.isnull().sum())

# Checking data types and column names
print(df.info())

"""### Data Preprocessing"""

# Removing Outliers
numeric_cols = df.select_dtypes(include=[np.number])

# Calculating z-scores for numeric columns
z_scores = stats.zscore(numeric_cols)

row_mask = (np.abs(z_scores) < 3).all(axis=1)

df_filtered = df[row_mask]

# Displaying the first few rows of the preprocessed DataFrame
print(df_filtered.head())

"""### Feature Selection"""

selected_features = ['child_mort', 'exports', 'health', 'imports', 'income', 'inflation', 'life_expec', 'total_fer', 'gdpp']

# Select the relevant features from the DataFrame
df_selected = df_filtered[selected_features]

# Display the first few rows of the DataFrame with selected features
print(df_selected.head())

"""### Standardizing the selected Features"""

# Using standard scalar
scaler = StandardScaler()

X_std = scaler.fit_transform(df_selected)

df_standardized = pd.DataFrame(data=X_std, columns=selected_features)

print(df_standardized.head())

"""### Using Clustering Algorithm/ Fitting the KMeans model"""

num_clusters = 3

kmeans = KMeans(n_clusters=num_clusters, random_state=42)

kmeans.fit(df_standardized)

# Obtaining the cluster labels for each data point
cluster_labels = kmeans.labels_

#Fitting the kmeans model
cluster_labels = kmeans.fit_predict(df_standardized)

# Adding cluster labels to the DataFrame
df_standardized['Cluster'] = cluster_labels

print(df_standardized.head())

"""### Determining the optimal number of clusters"""

inertia = []

# Defining a range of candidate cluster numbers (K values)
k_values = range(1, 11)

# Calculating the inertia for each K value
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(df_standardized)
    inertia.append(kmeans.inertia_)

# Plotting the elbow curve to visualize the inertia values for different K values
plt.figure(figsize=(8, 5))
plt.plot(k_values, inertia, marker='o', linestyle='-', color='b')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia')
plt.title('Elbow Curve to Find Optimal K')
plt.grid(True)
plt.show()

"""### Visualize the Clustering"""

# Calculate descriptive statistics for each cluster
cluster_stats = df_standardized.groupby('Cluster').mean()

print(cluster_stats)

# Pairplot to visualize relationships between features for each cluster
sns.pairplot(df_standardized, hue='Cluster', diag_kind='kde')
plt.show()

# Boxplot to visualize feature distributions for each cluster
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_standardized, x='Cluster', y='child_mort')
plt.xlabel('Cluster')
plt.ylabel('Child Mortality')
plt.title('Child Mortality Distribution in Clusters')
plt.show()

# Boxplot to visualize 'income' feature distribution for each cluster
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_standardized, x='Cluster', y='income')
plt.xlabel('Cluster')
plt.ylabel('Income')
plt.title('Income Distribution in Clusters')
plt.show()

# Boxplot to visualize 'exports' feature distribution for each cluster
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_standardized, x='Cluster', y='exports')
plt.xlabel('Cluster')
plt.ylabel('Exports')
plt.title('Exports Distribution in Clusters')
plt.show()

# Boxplot to visualize 'health' feature distribution for each cluster
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_standardized, x='Cluster', y='health')
plt.xlabel('Cluster')
plt.ylabel('Health Spending')
plt.title('Health Spending Distribution in Clusters')
plt.show()

# Boxplot to visualize 'inflation' feature distribution for each cluster
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_standardized, x='Cluster', y='inflation')
plt.xlabel('Cluster')
plt.ylabel('Inflation')
plt.title('Inflation Distribution in Clusters')
plt.show()